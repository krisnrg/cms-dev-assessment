{"version":3,"sources":["components/Story.js","App.js","serviceWorker.js","index.js"],"names":["Story","this","props","title","story","url","className","onError","img","src","ref","Component","App","state","error","isLoaded","stories","a","fetch","response","json","data","fetchStories","then","console","log","setState","map","idx","key","description","mediaurl","React","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","message"],"mappings":"6PAoBeA,G,uLAjBF,IAAD,SACwBC,KAAKC,MAA1BC,EADH,EACGA,MAAOC,EADV,EACUA,MAAOC,EADjB,EACiBA,IACrB,OACI,yBAAKC,UAAU,SACX,yBAAKA,UAAU,WACX,yBAAKC,QAAS,WAAO,EAAKC,IAAIC,IAAM,sBAAuB,EAAKF,QAAQ,MAAQE,IAAKJ,EAAKK,IAAK,SAAAF,GAAG,OAAI,EAAKA,IAAMA,MAErH,yBAAKF,UAAU,QACX,4BAAKH,GACL,2BAAIC,GACJ,yBAAKE,UAAU,gB,GAXfK,cCsCLC,E,YAnCb,WAAYV,GAAQ,IAAD,8BACjB,4CAAMA,KACDW,MAAQ,CACXC,MAAO,KACPC,UAAU,EACVC,QAAS,IALM,E,iFASE,IAAD,QACA,uCAAG,8BAAAC,EAAA,sEACEC,MAAM,yCADR,cACfC,EADe,gBAEFA,EAASC,OAFP,cAEfC,EAFe,yBAGZA,GAHY,2CAAH,qDAKjBC,GAAeC,MAAM,SAAAF,GACnBG,QAAQC,IAAIJ,EAAKA,MACjB,EAAKK,SAAS,CACZX,UAAU,EACVC,QAASK,EAAKA,Y,+BAKX,IACAL,EAAYf,KAAKY,MAAjBG,QACR,OACA,yBAAKV,UAAU,WACZU,EAAQW,KAAI,SAACvB,EAAOwB,GAAR,OACX,kBAAC,EAAD,CAAOC,IAAKD,EAAKzB,MAAOC,EAAMD,MAAOC,MAAOA,EAAM0B,YAAazB,IAAKD,EAAM2B,mB,GA9BhEC,IAAMrB,WCQJsB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCbNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD8H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBrB,MAAK,SAAAsB,GACJA,EAAaC,gBAEdC,OAAM,SAAAjC,GACLU,QAAQV,MAAMA,EAAMkC,c","file":"static/js/main.0cfd68ee.chunk.js","sourcesContent":["import React, {Component} from \"react\";\n\nclass Story extends Component {\n    render(){\n        const {title, story, url} = this.props\n        return(\n            <div className=\"story\">\n                <div className=\"picture\">\n                    <img onError={() => {this.img.src = 'images/fallback.jpg'; this.onError=null;}} src={url} ref={img => this.img = img}/>\n                </div>\n                <div className=\"text\">\n                    <h2>{title}</h2>\n                    <p>{story}</p>\n                    <div className=\"white\"></div>\n                </div>\n            </div>\n        );\n    }\n}\n\nexport default Story;","import React from 'react';\nimport './App.css';\nimport Story from './components/Story';\n\nclass App extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      error: null,\n      isLoaded: false,\n      stories: []\n    };\n  }\n\n  componentDidMount() {\n    const fetchStories = async () => {\n      let response = await fetch(\"https://sv-reqres.now.sh/api/listings\");\n      let data = await response.json();\n      return data;\n    }\n     fetchStories().then( data => {\n       console.log(data.data);\n       this.setState({\n         isLoaded: true,\n         stories: data.data\n       })\n     })\n  }\n\n  render() {\n    const { stories } = this.state;\n    return(\n    <div className=\"wrapper\">\n      {stories.map((story, idx) => (\n        <Story key={idx} title={story.title} story={story.description} url={story.mediaurl}/>\n      ))}\n    </div>\n    )}\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}