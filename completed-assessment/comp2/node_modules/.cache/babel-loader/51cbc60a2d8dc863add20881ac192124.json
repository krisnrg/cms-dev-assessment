{"ast":null,"code":"var _jsxFileName = \"/Users/kristiangonzalez/webdev/comp2/src/App.js\";\nimport React from 'react';\nimport './App.css';\nimport Story from './components/Story';\n\nclass App extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      error: null,\n      isLoaded: false,\n      stories: [],\n      listings: [],\n      events: [],\n      offers: []\n    };\n    this.handleUpdate = this.handleUpdate.bind(this);\n  }\n\n  componentDidMount() {\n    // Function to fetch data from API\n    const fetchData = async getData => {\n      let response = await fetch(`https://sv-reqres.now.sh/api/${getData}`);\n      let data = await response.json();\n      return data;\n    }; // Different urls to fetch\n\n\n    const urls = [\"listings\", \"events\", \"offers\"]; // Map over them and load them to the state\n\n    urls.map(url => {\n      fetchData(url).then(data => {\n        console.log(data.data);\n        this.setState(state => ({\n          // append all the urls to stories so that all datas shows initially\n          stories: [...state.stories, ...data.data],\n          // put them in their own variables individually so we can swap between them\n          [url]: data.data\n        }));\n      });\n    });\n  }\n\n  handleUpdate(update, e) {\n    this.setState(state => ({\n      stories: update\n    }));\n  }\n\n  render() {\n    const {\n      stories,\n      listings,\n      events,\n      offers\n    } = this.state;\n    return React.createElement(\"div\", {\n      className: \"wrapper\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 51\n      },\n      __self: this\n    }, React.createElement(\"nav\", {\n      className: \"menu\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 52\n      },\n      __self: this\n    }, React.createElement(\"button\", {\n      className: \"selected\",\n      onClick: this.handleUpdate.bind(this, [...listings, ...events, ...offers]),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 53\n      },\n      __self: this\n    }, \"All\"), React.createElement(\"button\", {\n      onClick: this.handleUpdate.bind(this, listings),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 55\n      },\n      __self: this\n    }, \"Listings\"), React.createElement(\"button\", {\n      onClick: this.handleUpdate.bind(this, events),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 56\n      },\n      __self: this\n    }, \"Events\"), React.createElement(\"button\", {\n      onClick: this.handleUpdate.bind(this, offers),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 57\n      },\n      __self: this\n    }, \"Offers\")), React.createElement(\"div\", {\n      className: \"grid\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 59\n      },\n      __self: this\n    }, stories.map((story, idx) => React.createElement(Story, {\n      key: idx,\n      title: story.title,\n      story: story.description,\n      url: story.mediaurl,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 61\n      },\n      __self: this\n    }))));\n  }\n\n}\n\nexport default App;","map":{"version":3,"sources":["/Users/kristiangonzalez/webdev/comp2/src/App.js"],"names":["React","Story","App","Component","constructor","props","state","error","isLoaded","stories","listings","events","offers","handleUpdate","bind","componentDidMount","fetchData","getData","response","fetch","data","json","urls","map","url","then","console","log","setState","update","e","render","story","idx","title","description","mediaurl"],"mappings":"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","sourcesContent":["import React from 'react';\nimport './App.css';\nimport Story from './components/Story';\n\nclass App extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      error: null,\n      isLoaded: false,\n      stories: [],\n      listings: [],\n      events: [],\n      offers: []\n    };\n    this.handleUpdate = this.handleUpdate.bind(this);\n  }\n  \n  componentDidMount() {\n    // Function to fetch data from API\n    const fetchData = async (getData) => {\n      let response = await fetch(`https://sv-reqres.now.sh/api/${getData}`);\n      let data = await response.json();\n      return data;\n    }\n    // Different urls to fetch\n    const urls = [ \"listings\", \"events\", \"offers\"]\n    // Map over them and load them to the state\n    urls.map((url) => {\n      fetchData(url).then( data => {\n        console.log(data.data);\n        this.setState((state) => ({\n          // append all the urls to stories so that all datas shows initially\n          stories: [...state.stories, ...data.data],\n          // put them in their own variables individually so we can swap between them\n          [url]: data.data\n        }))\n      })\n    })\n  }\n\n  handleUpdate(update, e){\n    this.setState(state => ({\n      stories: update\n    }));\n  }\n\n  render() {\n    const { stories, listings, events, offers } = this.state;\n    return(\n      <div className=\"wrapper\">\n        <nav className=\"menu\">\n          <button className=\"selected\"\n          onClick={this.handleUpdate.bind(this, [...listings, ...events, ...offers])}>All</button>\n          <button onClick={this.handleUpdate.bind(this, listings)}>Listings</button>\n          <button onClick={this.handleUpdate.bind(this, events)}>Events</button>\n          <button onClick={this.handleUpdate.bind(this, offers)}>Offers</button>\n        </nav>\n      <div className=\"grid\">\n        { stories.map((story, idx) => (\n          <Story key={idx} title={story.title} story={story.description} url={story.mediaurl}/>\n        )) }\n      </div>\n    </div>\n    )}\n}\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}