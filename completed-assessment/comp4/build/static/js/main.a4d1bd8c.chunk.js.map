{"version":3,"sources":["components/Story.js","App.js","serviceWorker.js","index.js"],"names":["Story","this","props","title","url","idx","className","onError","img","src","ref","alt","Component","App","state","error","stories","currentItemIdx","currentLayout","totalStories","layouts","1","2","3","4","fetchData","getData","a","fetch","response","json","data","forEach","then","console","log","nArray","slice","shuffle","setState","array","temporaryValue","randomIndex","currentIndex","length","Math","floor","random","e","preventDefault","Object","keys","nidx","filter","elem","map","story","output","key","description","mediaurl","href","onClick","handleStoriesPrev","bind","handleStoriesNext","React","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","message"],"mappings":"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","file":"static/js/main.a4d1bd8c.chunk.js","sourcesContent":["import React, {Component} from \"react\";\n\nclass Story extends Component {\n    render(){\n        const {title, url, idx} = this.props\n        return(\n            <div className=\"story\" >\n                <h2><sup>0{idx + 1}.</sup> {title}</h2>\n                <div className=\"picture\">\n                    <img onError={() => {this.img.src = 'images/fallback.jpg'; this.onError=null;}} src={url} ref={img => this.img = img} alt={title}/>\n                </div>\n            </div>\n        );\n    }\n}\n\nexport default Story;","import React from 'react';\nimport './App.css';\nimport Story from './components/Story';\n\nclass App extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      error: null,\n      stories: [],\n      currentItemIdx: 1,\n      currentLayout: 1,\n      totalStories: 16,\n      layouts: {\n        1 : 5,\n        2 : 5,\n        3 : 3,\n        4 : 2,\n      }\n    };\n  }\n  \n  componentDidMount() {\n    // Different urls to fetch\n    const urls = [ \"listings\"]\n\n    // Function to fetch data from API\n    const fetchData = async (getData) => {\n      let response = await fetch(`https://sv-reqres.now.sh/api/${getData}/?per_page=${this.state.totalStories}`);\n      let data = await response.json();\n      return data;\n    }\n\n    // Iterate over them and load them to the state\n    urls.forEach((url) => {\n      fetchData(url).then( data => {\n        console.log(data.data);\n        let nArray = data.data.slice(0);\n        this.shuffle(nArray);\n        console.log(typeof(nArray));\n        this.setState(state => ({\n          // append all the urls to stories so that all datas shows initially\n          stories: nArray,\n          // put them in their own variables individually so we can swap between them\n          [url]: data.data\n        }))\n      })\n    })\n  }\n\n  shuffle(array) {\n    var currentIndex = array.length, temporaryValue, randomIndex;\n  \n    // While there remain elements to shuffle...\n    while (0 !== currentIndex) {\n  \n      // Pick a remaining element...\n      randomIndex = Math.floor(Math.random() * currentIndex);\n      currentIndex -= 1;\n  \n      // And swap it with the current element.\n      temporaryValue = array[currentIndex];\n      array[currentIndex] = array[randomIndex];\n      array[randomIndex] = temporaryValue;\n    }\n  \n    return array;\n  }\n\n  handleStoriesNext(e){\n    e.preventDefault();\n    const { currentLayout, layouts } = this.state\n    // go to the next layout\n    if (currentLayout === Object.keys(layouts).length){\n      this.setState({\n        currentItemIdx: 1,\n        currentLayout: 1\n      })\n    } else {\n      this.setState(state => ({\n        currentItemIdx: state.currentItemIdx + state.layouts[state.currentLayout],\n        currentLayout: state.currentLayout + 1\n      }));\n    }\n  }\n  handleStoriesPrev(e){\n    e.preventDefault();\n    const { currentLayout } = this.state\n    // go to the prev layout\n    if (currentLayout === 1){\n      this.setState(state => ({\n        currentItemIdx: state.totalStories - state.layouts[4],\n        currentLayout: 4\n      }))\n    } else {\n      this.setState(state => ({\n        currentItemIdx: state.currentItemIdx - state.layouts[state.currentLayout - 1],\n        currentLayout: state.currentLayout - 1\n      }));\n    }\n  }\n\n\n  render() {\n    const { stories, currentItemIdx, currentLayout, layouts } = this.state;\n    let nidx = currentItemIdx - 1;\n    return(\n      <div className=\"wrapper\">\n        <div className={`grid layout${currentLayout}`}>\n          { stories.filter((elem, idx) => idx >= currentItemIdx && idx < currentItemIdx + layouts[currentLayout] )\n            .map((story, idx) => {\n              const output = <Story key={idx} title={story.title} story={story.description} url={story.mediaurl} idx={nidx}/>\n              nidx = nidx + 1\n              return output;\n            })}\n        </div>\n        <nav>\n          <div className=\"controls\">\n            <a href=\"prev\" onClick={this.handleStoriesPrev.bind(this)}>Prev.</a>\n            <a href=\"next\" onClick={this.handleStoriesNext.bind(this)}>Next</a>\n          </div>\n        </nav>\n    </div>\n    )}\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}