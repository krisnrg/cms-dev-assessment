{"ast":null,"code":"var _jsxFileName = \"/Users/kristiangonzalez/webdev/comp4/src/App.js\";\nimport React from 'react';\nimport './App.css';\nimport Story from './components/Story';\n\nclass App extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      error: null,\n      stories: [],\n      currentItemIdx: 1,\n      currentLayout: 1,\n      totalStories: 16,\n      layouts: {\n        1: 5,\n        2: 5,\n        3: 3,\n        4: 2\n      }\n    };\n  }\n\n  componentDidMount() {\n    // Different urls to fetch\n    const urls = [\"listings\"]; // Function to fetch data from API\n\n    const fetchData = async getData => {\n      let response = await fetch(`https://sv-reqres.now.sh/api/${getData}/?per_page=${this.state.totalStories}`);\n      let data = await response.json();\n      return data;\n    }; // Iterate over them and load them to the state\n\n\n    urls.forEach(url => {\n      fetchData(url).then(data => {\n        console.log(data.data);\n        let nArray = data.data.slice(0);\n        let rando = this.shuffleArray(nArray);\n        console.log(typeof rando);\n        this.setState(state => ({\n          // append all the urls to stories so that all datas shows initially\n          stories: rando,\n          // put them in their own variables individually so we can swap between them\n          [url]: data.data\n        }));\n      });\n    });\n  }\n\n  shuffle(array) {\n    var currentIndex = array.length,\n        temporaryValue,\n        randomIndex; // While there remain elements to shuffle...\n\n    while (0 !== currentIndex) {\n      // Pick a remaining element...\n      randomIndex = Math.floor(Math.random() * currentIndex);\n      currentIndex -= 1; // And swap it with the current element.\n\n      temporaryValue = array[currentIndex];\n      array[currentIndex] = array[randomIndex];\n      array[randomIndex] = temporaryValue;\n    }\n\n    return array;\n  }\n\n  handleStoriesNext(e) {\n    e.preventDefault();\n    const {\n      currentLayout,\n      layouts\n    } = this.state; // go to the next layout\n\n    if (currentLayout === Object.keys(layouts).length) {\n      this.setState({\n        currentItemIdx: 1,\n        currentLayout: 1\n      });\n    } else {\n      this.setState(state => ({\n        currentItemIdx: state.currentItemIdx + state.layouts[state.currentLayout],\n        currentLayout: state.currentLayout + 1\n      }));\n    }\n  }\n\n  handleStoriesPrev(e) {\n    e.preventDefault();\n    const {\n      currentLayout\n    } = this.state; // go to the prev layout\n\n    if (currentLayout === 1) {\n      this.setState(state => ({\n        currentItemIdx: state.totalStories - state.layouts[4],\n        currentLayout: 4\n      }));\n    } else {\n      this.setState(state => ({\n        currentItemIdx: state.currentItemIdx - state.layouts[state.currentLayout - 1],\n        currentLayout: state.currentLayout - 1\n      }));\n    }\n  }\n\n  render() {\n    const {\n      stories,\n      currentItemIdx,\n      currentLayout,\n      layouts\n    } = this.state;\n    let nidx = currentItemIdx - 1;\n    return React.createElement(\"div\", {\n      className: \"wrapper\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 108\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: `grid layout${currentLayout}`,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 109\n      },\n      __self: this\n    }, stories.filter((elem, idx) => idx >= currentItemIdx && idx < currentItemIdx + layouts[currentLayout]).map((story, idx) => {\n      const output = React.createElement(Story, {\n        key: idx,\n        title: story.title,\n        story: story.description,\n        url: story.mediaurl,\n        idx: nidx,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 112\n        },\n        __self: this\n      });\n      nidx = nidx + 1;\n      return output;\n    })), React.createElement(\"nav\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 117\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: \"controls\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 118\n      },\n      __self: this\n    }, React.createElement(\"a\", {\n      href: \"prev\",\n      onClick: this.handleStoriesPrev.bind(this),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 119\n      },\n      __self: this\n    }, \"Prev.\"), React.createElement(\"a\", {\n      href: \"next\",\n      onClick: this.handleStoriesNext.bind(this),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 120\n      },\n      __self: this\n    }, \"Next\"))));\n  }\n\n}\n\nexport default App;","map":{"version":3,"sources":["/Users/kristiangonzalez/webdev/comp4/src/App.js"],"names":["React","Story","App","Component","constructor","props","state","error","stories","currentItemIdx","currentLayout","totalStories","layouts","componentDidMount","urls","fetchData","getData","response","fetch","data","json","forEach","url","then","console","log","nArray","slice","rando","shuffleArray","setState","shuffle","array","currentIndex","length","temporaryValue","randomIndex","Math","floor","random","handleStoriesNext","e","preventDefault","Object","keys","handleStoriesPrev","render","nidx","filter","elem","idx","map","story","output","title","description","mediaurl","bind"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAO,WAAP;AACA,OAAOC,KAAP,MAAkB,oBAAlB;;AAEA,MAAMC,GAAN,SAAkBF,KAAK,CAACG,SAAxB,CAAkC;AAChCC,EAAAA,WAAW,CAACC,KAAD,EAAQ;AACjB,UAAMA,KAAN;AACA,SAAKC,KAAL,GAAa;AACXC,MAAAA,KAAK,EAAE,IADI;AAEXC,MAAAA,OAAO,EAAE,EAFE;AAGXC,MAAAA,cAAc,EAAE,CAHL;AAIXC,MAAAA,aAAa,EAAE,CAJJ;AAKXC,MAAAA,YAAY,EAAE,EALH;AAMXC,MAAAA,OAAO,EAAE;AACP,WAAI,CADG;AAEP,WAAI,CAFG;AAGP,WAAI,CAHG;AAIP,WAAI;AAJG;AANE,KAAb;AAaD;;AAEDC,EAAAA,iBAAiB,GAAG;AAClB;AACA,UAAMC,IAAI,GAAG,CAAE,UAAF,CAAb,CAFkB,CAIlB;;AACA,UAAMC,SAAS,GAAG,MAAOC,OAAP,IAAmB;AACnC,UAAIC,QAAQ,GAAG,MAAMC,KAAK,CAAE,gCAA+BF,OAAQ,cAAa,KAAKV,KAAL,CAAWK,YAAa,EAA9E,CAA1B;AACA,UAAIQ,IAAI,GAAG,MAAMF,QAAQ,CAACG,IAAT,EAAjB;AACA,aAAOD,IAAP;AACD,KAJD,CALkB,CAWlB;;;AACAL,IAAAA,IAAI,CAACO,OAAL,CAAcC,GAAD,IAAS;AACpBP,MAAAA,SAAS,CAACO,GAAD,CAAT,CAAeC,IAAf,CAAqBJ,IAAI,IAAI;AAC3BK,QAAAA,OAAO,CAACC,GAAR,CAAYN,IAAI,CAACA,IAAjB;AACA,YAAIO,MAAM,GAAGP,IAAI,CAACA,IAAL,CAAUQ,KAAV,CAAgB,CAAhB,CAAb;AACA,YAAIC,KAAK,GAAG,KAAKC,YAAL,CAAkBH,MAAlB,CAAZ;AACAF,QAAAA,OAAO,CAACC,GAAR,CAAY,OAAOG,KAAnB;AACA,aAAKE,QAAL,CAAcxB,KAAK,KAAK;AACtB;AACAE,UAAAA,OAAO,EAAEoB,KAFa;AAGtB;AACA,WAACN,GAAD,GAAOH,IAAI,CAACA;AAJU,SAAL,CAAnB;AAMD,OAXD;AAYD,KAbD;AAcD;;AAEDY,EAAAA,OAAO,CAACC,KAAD,EAAQ;AACb,QAAIC,YAAY,GAAGD,KAAK,CAACE,MAAzB;AAAA,QAAiCC,cAAjC;AAAA,QAAiDC,WAAjD,CADa,CAGb;;AACA,WAAO,MAAMH,YAAb,EAA2B;AAEzB;AACAG,MAAAA,WAAW,GAAGC,IAAI,CAACC,KAAL,CAAWD,IAAI,CAACE,MAAL,KAAgBN,YAA3B,CAAd;AACAA,MAAAA,YAAY,IAAI,CAAhB,CAJyB,CAMzB;;AACAE,MAAAA,cAAc,GAAGH,KAAK,CAACC,YAAD,CAAtB;AACAD,MAAAA,KAAK,CAACC,YAAD,CAAL,GAAsBD,KAAK,CAACI,WAAD,CAA3B;AACAJ,MAAAA,KAAK,CAACI,WAAD,CAAL,GAAqBD,cAArB;AACD;;AAED,WAAOH,KAAP;AACD;;AAEDQ,EAAAA,iBAAiB,CAACC,CAAD,EAAG;AAClBA,IAAAA,CAAC,CAACC,cAAF;AACA,UAAM;AAAEhC,MAAAA,aAAF;AAAiBE,MAAAA;AAAjB,QAA6B,KAAKN,KAAxC,CAFkB,CAGlB;;AACA,QAAII,aAAa,KAAKiC,MAAM,CAACC,IAAP,CAAYhC,OAAZ,EAAqBsB,MAA3C,EAAkD;AAChD,WAAKJ,QAAL,CAAc;AACZrB,QAAAA,cAAc,EAAE,CADJ;AAEZC,QAAAA,aAAa,EAAE;AAFH,OAAd;AAID,KALD,MAKO;AACL,WAAKoB,QAAL,CAAcxB,KAAK,KAAK;AACtBG,QAAAA,cAAc,EAAEH,KAAK,CAACG,cAAN,GAAuBH,KAAK,CAACM,OAAN,CAAcN,KAAK,CAACI,aAApB,CADjB;AAEtBA,QAAAA,aAAa,EAAEJ,KAAK,CAACI,aAAN,GAAsB;AAFf,OAAL,CAAnB;AAID;AACF;;AACDmC,EAAAA,iBAAiB,CAACJ,CAAD,EAAG;AAClBA,IAAAA,CAAC,CAACC,cAAF;AACA,UAAM;AAAEhC,MAAAA;AAAF,QAAoB,KAAKJ,KAA/B,CAFkB,CAGlB;;AACA,QAAII,aAAa,KAAK,CAAtB,EAAwB;AACtB,WAAKoB,QAAL,CAAcxB,KAAK,KAAK;AACtBG,QAAAA,cAAc,EAAEH,KAAK,CAACK,YAAN,GAAqBL,KAAK,CAACM,OAAN,CAAc,CAAd,CADf;AAEtBF,QAAAA,aAAa,EAAE;AAFO,OAAL,CAAnB;AAID,KALD,MAKO;AACL,WAAKoB,QAAL,CAAcxB,KAAK,KAAK;AACtBG,QAAAA,cAAc,EAAEH,KAAK,CAACG,cAAN,GAAuBH,KAAK,CAACM,OAAN,CAAcN,KAAK,CAACI,aAAN,GAAsB,CAApC,CADjB;AAEtBA,QAAAA,aAAa,EAAEJ,KAAK,CAACI,aAAN,GAAsB;AAFf,OAAL,CAAnB;AAID;AACF;;AAGDoC,EAAAA,MAAM,GAAG;AACP,UAAM;AAAEtC,MAAAA,OAAF;AAAWC,MAAAA,cAAX;AAA2BC,MAAAA,aAA3B;AAA0CE,MAAAA;AAA1C,QAAsD,KAAKN,KAAjE;AACA,QAAIyC,IAAI,GAAGtC,cAAc,GAAG,CAA5B;AACA,WACE;AAAK,MAAA,SAAS,EAAC,SAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACE;AAAK,MAAA,SAAS,EAAG,cAAaC,aAAc,EAA5C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACIF,OAAO,CAACwC,MAAR,CAAe,CAACC,IAAD,EAAOC,GAAP,KAAeA,GAAG,IAAIzC,cAAP,IAAyByC,GAAG,GAAGzC,cAAc,GAAGG,OAAO,CAACF,aAAD,CAArF,EACCyC,GADD,CACK,CAACC,KAAD,EAAQF,GAAR,KAAgB;AACnB,YAAMG,MAAM,GAAG,oBAAC,KAAD;AAAO,QAAA,GAAG,EAAEH,GAAZ;AAAiB,QAAA,KAAK,EAAEE,KAAK,CAACE,KAA9B;AAAqC,QAAA,KAAK,EAAEF,KAAK,CAACG,WAAlD;AAA+D,QAAA,GAAG,EAAEH,KAAK,CAACI,QAA1E;AAAoF,QAAA,GAAG,EAAET,IAAzF;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QAAf;AACAA,MAAAA,IAAI,GAAGA,IAAI,GAAG,CAAd;AACA,aAAOM,MAAP;AACD,KALD,CADJ,CADF,EASE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACE;AAAK,MAAA,SAAS,EAAC,UAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACE;AAAG,MAAA,IAAI,EAAC,MAAR;AAAe,MAAA,OAAO,EAAE,KAAKR,iBAAL,CAAuBY,IAAvB,CAA4B,IAA5B,CAAxB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,eADF,EAEE;AAAG,MAAA,IAAI,EAAC,MAAR;AAAe,MAAA,OAAO,EAAE,KAAKjB,iBAAL,CAAuBiB,IAAvB,CAA4B,IAA5B,CAAxB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cAFF,CADF,CATF,CADF;AAiBE;;AAvH4B;;AA0HlC,eAAevD,GAAf","sourcesContent":["import React from 'react';\nimport './App.css';\nimport Story from './components/Story';\n\nclass App extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      error: null,\n      stories: [],\n      currentItemIdx: 1,\n      currentLayout: 1,\n      totalStories: 16,\n      layouts: {\n        1 : 5,\n        2 : 5,\n        3 : 3,\n        4 : 2,\n      }\n    };\n  }\n  \n  componentDidMount() {\n    // Different urls to fetch\n    const urls = [ \"listings\"]\n\n    // Function to fetch data from API\n    const fetchData = async (getData) => {\n      let response = await fetch(`https://sv-reqres.now.sh/api/${getData}/?per_page=${this.state.totalStories}`);\n      let data = await response.json();\n      return data;\n    }\n\n    // Iterate over them and load them to the state\n    urls.forEach((url) => {\n      fetchData(url).then( data => {\n        console.log(data.data);\n        let nArray = data.data.slice(0);\n        let rando = this.shuffleArray(nArray);\n        console.log(typeof(rando));\n        this.setState(state => ({\n          // append all the urls to stories so that all datas shows initially\n          stories: rando,\n          // put them in their own variables individually so we can swap between them\n          [url]: data.data\n        }))\n      })\n    })\n  }\n\n  shuffle(array) {\n    var currentIndex = array.length, temporaryValue, randomIndex;\n  \n    // While there remain elements to shuffle...\n    while (0 !== currentIndex) {\n  \n      // Pick a remaining element...\n      randomIndex = Math.floor(Math.random() * currentIndex);\n      currentIndex -= 1;\n  \n      // And swap it with the current element.\n      temporaryValue = array[currentIndex];\n      array[currentIndex] = array[randomIndex];\n      array[randomIndex] = temporaryValue;\n    }\n  \n    return array;\n  }\n\n  handleStoriesNext(e){\n    e.preventDefault();\n    const { currentLayout, layouts } = this.state\n    // go to the next layout\n    if (currentLayout === Object.keys(layouts).length){\n      this.setState({\n        currentItemIdx: 1,\n        currentLayout: 1\n      })\n    } else {\n      this.setState(state => ({\n        currentItemIdx: state.currentItemIdx + state.layouts[state.currentLayout],\n        currentLayout: state.currentLayout + 1\n      }));\n    }\n  }\n  handleStoriesPrev(e){\n    e.preventDefault();\n    const { currentLayout } = this.state\n    // go to the prev layout\n    if (currentLayout === 1){\n      this.setState(state => ({\n        currentItemIdx: state.totalStories - state.layouts[4],\n        currentLayout: 4\n      }))\n    } else {\n      this.setState(state => ({\n        currentItemIdx: state.currentItemIdx - state.layouts[state.currentLayout - 1],\n        currentLayout: state.currentLayout - 1\n      }));\n    }\n  }\n\n\n  render() {\n    const { stories, currentItemIdx, currentLayout, layouts } = this.state;\n    let nidx = currentItemIdx - 1;\n    return(\n      <div className=\"wrapper\">\n        <div className={`grid layout${currentLayout}`}>\n          { stories.filter((elem, idx) => idx >= currentItemIdx && idx < currentItemIdx + layouts[currentLayout] )\n            .map((story, idx) => {\n              const output = <Story key={idx} title={story.title} story={story.description} url={story.mediaurl} idx={nidx}/>\n              nidx = nidx + 1\n              return output;\n            })}\n        </div>\n        <nav>\n          <div className=\"controls\">\n            <a href=\"prev\" onClick={this.handleStoriesPrev.bind(this)}>Prev.</a>\n            <a href=\"next\" onClick={this.handleStoriesNext.bind(this)}>Next</a>\n          </div>\n        </nav>\n    </div>\n    )}\n}\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}